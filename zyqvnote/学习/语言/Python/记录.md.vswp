vnote_backup_file_826537664 D:/project/myproject/vnote/zyqvnote/学习/语言/Python/记录.md
#### Django
#创建APP  
Python.exe manage.py startapp xxx  

#setting中添加APP  
Python3 manage.py makemigrations  
Python3 manage.py migrate  
Python3 manage.py createsuperuser  
在python2中不能直接从一个文件夹下直接导入，必须先创建——init__.py文件  


### python动态性
```
变量动态绑定
class newClass(object):
    def __init__(self):
        pass
#给classA动态绑定一个num
classA = newClass()
classA.num = 10
#输出classA的num属性
print classA.num
10


方法动态绑定
#首先来创建一个方法
def set_age(self,age):   #不要忘了方法要给self哦
    self.age = age
#还是classA
classA.set_age = set_age
#没问题，貌似可以
classA.set_age(18)
#boom  报错，说少给一个参数，没少给啊，难道self也是一个参数？
TypeError: set_age() takes exactly 2 arguments (1 given)
classA.set_age(18,18)
#boom 报错，说int没有age这个属性
AttributeError: 'int' object has no attribute 'age'

from types import MethodType
#通过MethodType来绑定方法
classA.set_age = MethodType(set_age,classA)
#试验一下
classA.set_age(20)
classA.age
#确定已经成为20了
20

#直接将这个方法赋值给newClass这个类
newClass.set_age = set_age
#当你动态绑定完成之后，你可以直接使用，不用再重新声明classB
classB.set_age(21)
classB.age
21

```


### python3闭包
解决办法有点像将这个变量变为类变量，然后值将一直被修改
```
#修改闭包变量的实例
# outer是外部函数 a和b都是外函数的临时变量
def outer( a ):
    b = 10  # a和b都是闭包变量
    c = [a] #这里对应修改闭包变量的方法2
    # inner是内函数
    def inner():
        #内函数中想修改闭包变量
        # 方法1 nonlocal关键字声明
        nonlocal  b
        b+=1
        # 方法二，把闭包变量修改成可变数据类型 比如列表
        c[0] += 1
        print(c[0])
        print(b)
    # 外函数的返回值是内函数的引用
    return inner

if __name__ == '__main__':

    demo = outer(5)
    demo() # 6  11

值一直被修改
#coding:utf8
def outer(x):
    def inner(y):
        nonlocal x
        x+=y
        return x
    return inner


a = outer(10)
print(a(1)) //11
print(a(3)) //14
```